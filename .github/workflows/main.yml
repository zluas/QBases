name: Build Qt 5.12.12 Static (VS2022)

on:
  workflow_dispatch:  # 允许手动触发
  push:
    branches: [ main ]

env:
  QT_VERSION: 5.12.12
  QT_SOURCE_URL: https://download.qt.io/archive/qt/5.12/$QT_VERSION/single/qt-everywhere-src-$QT_VERSION.tar.xz

jobs:
  build-qt-static:
    runs-on: windows-2022
    timeout-minutes: 240  # 编译耗时较长，设置超时为4小时

    steps:
    # ================= 初始化阶段 =================
    - name: Checkout repository
      uses: actions/checkout@v4

    # ================= 依赖安装阶段 =================
    - name: Install Chocolatey
      shell: powershell
      run: |
        Set-ExecutionPolicy Bypass -Scope Process -Force
        [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
        iex ((New-Object System.Net.WebClient).DownloadString('https://community.chocolatey.org/install.ps1'))
        Write-Host "Chocolatey installed to: $env:ChocolateyInstall"

    - name: Install Build Dependencies
      shell: powershell
      run: |
        # 安装指定版本依赖
        choco install -y --no-progress --version=5.32.1.1 strawberryperl
        choco install -y --no-progress --version=3.9.13 python
        choco install -y --no-progress 7zip
        choco install -y --no-progress jom

        # 强制刷新环境变量
        Import-Module "$env:ChocolateyInstall\helpers\chocolateyProfile.psm1"
        Update-SessionEnvironment
        refreshenv

        # 验证工具链
        Write-Host "Python path: $(Get-Command python)"
        Write-Host "Perl path: $(Get-Command perl)"
        Write-Host "7z version: $(7z | Select-String 'Version')"

    # ========== 编译环境配置 ==========
    - name: Setup MSVC 2022
      uses: ilammy/msvc-dev-cmd@v1
      with:
        arch: x64
        vs-version: 2022

    # ================= 源码管理阶段 =================
    - name: Cache Qt Source
      uses: actions/cache@v3
      id: qt-source-cache
      with:
        path: |
          qt-src/
          qt-everywhere-src-${{ env.QT_VERSION }}.tar.xz
        key: qt-${{ env.QT_VERSION }}-source-${{ hashFiles('.github/workflows/build-qt-static.yml') }}

    - name: Download and Extract Qt Source
      if: steps.qt-source-cache.outputs.cache-hit != 'true'
      shell: cmd
      run: |
        curl -L -o qt-everywhere-src-%QT_VERSION%.tar.xz "%QT_SOURCE_URL%"
        7z x qt-everywhere-src-%QT_VERSION%.tar.xz
        7z x qt-everywhere-src-%QT_VERSION%.tar
        ren qt-everywhere-src-%QT_VERSION% qt-src

    # ================= 编译配置阶段 =================
    - name: Configure Qt Build
      shell: cmd
      run: |
        cd qt-src
        configure.bat -static -release -opensource -confirm-license ^
          -prefix "C:\Qt\%QT_VERSION%-static-msvc2022" ^
          -platform win32-msvc ^
          -nomake examples -nomake tests ^
          -qt-zlib -qt-libpng -qt-libjpeg ^
          -opengl desktop -mp ^
          -skip webengine -skip qtwebengine -skip qtwebview ^
          -no-feature-sql -no-feature-xml -no-feature-network

        # 生成并行编译配置
        jom -f Makefile qmake_all

    # ================= 编译阶段 =================
    - name: Build Qt (Parallel)
      shell: cmd
      run: |
        cd qt-src
        jom -j %NUMBER_OF_PROCESSORS%
        jom install

    # ================= 产物处理阶段 =================
    - name: Verify Static Libraries
      shell: cmd
      run: |
        dir /s /b C:\Qt\%QT_VERSION%-static-msvc2022\lib\*.lib
        if not exist C:\Qt\%QT_VERSION%-static-msvc2022\bin\qmake.exe (
          exit 1
        )

    - name: Upload Artifact
      uses: actions/upload-artifact@v4
      with:
        name: Qt-${{ env.QT_VERSION }}-Static-VS2022
        path: C:\Qt\${{ env.QT_VERSION }}-static-msvc2022
        retention-days: 7
        compression-level: 0  # 静态库本身已压缩，禁用二次压缩

    # ================= 清理阶段 =================
    - name: Cleanup Build Files
      if: always()
      shell: cmd
      run: |
        rmdir /s /q qt-src
        del qt-everywhere-src-%QT_VERSION%.tar.xz
